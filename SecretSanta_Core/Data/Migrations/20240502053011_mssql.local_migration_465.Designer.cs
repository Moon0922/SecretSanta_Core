// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecretSanta_Core.Data;

#nullable disable

namespace SecretSanta_Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240502053011_mssql.local_migration_465")]
    partial class mssqllocal_migration_465
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.ApplicationSetting", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettingsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingsId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("SettingsName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SettingsValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SettingsId");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.GiftDetail", b =>
                {
                    b.Property<int>("GiftDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftDetailId"));

                    b.Property<int>("GiftDetailOrder")
                        .HasColumnType("int");

                    b.Property<string>("GiftDetailText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GiftIdeaDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LblGiftDetail1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("lblGiftDetail1");

                    b.Property<string>("LblGiftDetail2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("lblGiftDetail2");

                    b.HasKey("GiftDetailId");

                    b.ToTable("GiftDetail", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.SecretSantaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ExceptionSource")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LogDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("StackTrace")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PK_Table_1");

                    b.ToTable("SecretSantaLog", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAdminEmail", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailId"));

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmailId")
                        .HasName("PK_SecretSantaLetters");

                    b.ToTable("tblAdminEmails", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"));

                    b.Property<string>("AgencyCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgencyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("AgencyState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("AgencyStreet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AgencyWebRank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AgencyZip")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.Property<int?>("EstimateWishes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NotificationLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((10))");

                    b.Property<int?>("Overflow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OverflowNotes")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Payment")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .HasDefaultValueSql("(N'SR')")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("Type")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AgencyId");

                    b.HasIndex("Region");

                    b.HasIndex(new[] { "AgencyCode" }, "UC_tblAgencies_AgencyCode")
                        .IsUnique();

                    b.HasIndex(new[] { "AgencyName" }, "UC_tblAgencies_AgencyName")
                        .IsUnique();

                    b.ToTable("tblAgencies", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgencyCheckInLog", b =>
                {
                    b.Property<int>("CheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CheckInID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckInId"));

                    b.Property<string>("CheckInAgencyContactId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CheckInAgencyContactID");

                    b.Property<DateTime>("CheckInDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CheckInTixNum")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("CheckInId")
                        .HasName("PK_tblCheckInLog");

                    b.ToTable("tblAgencyCheckInLog", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgencyContact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AltPhone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<int?>("EstimateWishes")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.ToTable("tblAgencyContacts", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgencyLocation", b =>
                {
                    b.Property<int>("TblAgencyLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tblAgencyLocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TblAgencyLocationId"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<string>("LocDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("TblAgencyLocationId");

                    b.HasIndex("AgencyId");

                    b.ToTable("tblAgencyLocations", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgencyPickUp", b =>
                {
                    b.Property<int>("AgencyPickUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyPickUpId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AgencyPickUpId");

                    b.HasIndex("AgencyId");

                    b.ToTable("tblAgencyPickUp", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblApp", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppId"));

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ChangeInfo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IncludeInLogin")
                        .HasColumnType("bit");

                    b.Property<string>("LaunchForm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<int?>("SetStatusTo")
                        .HasColumnType("int");

                    b.HasKey("AppId");

                    b.ToTable("tblApps", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAppUser", b =>
                {
                    b.Property<int>("AppUserAu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppUserAU");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserAu"));

                    b.Property<int>("AuappId")
                        .HasColumnType("int")
                        .HasColumnName("AUAppID");

                    b.Property<string>("Aupermission")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("AUPermission")
                        .HasDefaultValueSql("('User')")
                        .IsFixedLength();

                    b.Property<string>("Austatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("AUStatus")
                        .HasDefaultValueSql("('Not Allowed')")
                        .IsFixedLength();

                    b.Property<int>("AuuserId")
                        .HasColumnType("int")
                        .HasColumnName("AUUserID");

                    b.HasKey("AppUserAu");

                    b.ToTable("tblAppUsers", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblCategoryDescription", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("CategoryId");

                    b.ToTable("tblCategoryDescriptions", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblDonation", b =>
                {
                    b.Property<int>("DonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("DonDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RecipientNum")
                        .HasColumnType("int");

                    b.HasKey("DonId");

                    b.HasIndex("RecipientNum");

                    b.ToTable("tblDonations", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblDonor", b =>
                {
                    b.Property<string>("DonorId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DonorEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("DonorId");

                    b.ToTable("tblDonor", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblDonorThankYou", b =>
                {
                    b.Property<int>("DonorThankYouId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonorThankYouId"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("DonorId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("ThankYouDate")
                        .HasColumnType("datetime");

                    b.HasKey("DonorThankYouId")
                        .HasName("PK_DonorThankYou");

                    b.HasIndex("DonorId");

                    b.ToTable("tblDonorThankYou", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblElf", b =>
                {
                    b.Property<int>("ElfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ElfID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElfId"));

                    b.Property<string>("ElfAltPhone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Elf_AltPhone");

                    b.Property<string>("ElfEmail")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("Elf_Email");

                    b.Property<string>("ElfFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Elf_FirstName");

                    b.Property<string>("ElfLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Elf_LastName");

                    b.Property<string>("ElfPhone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Elf_Phone");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("TrainingDates")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ElfId");

                    b.ToTable("tblElves", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblErrorLog", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ErrorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorId"));

                    b.Property<int?>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int")
                        .HasColumnName("AppUserID");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ErrorDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ErrorDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Event")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Field")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Form")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LabelId")
                        .HasColumnType("int")
                        .HasColumnName("LabelID");

                    b.Property<string>("Machine")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MiscVariable")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("ErrorId");

                    b.ToTable("tblErrorLog", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblErrorLogArchive", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ErrorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorId"));

                    b.Property<int?>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int")
                        .HasColumnName("AppUserID");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ErrorDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Event")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Field")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Form")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LabelId")
                        .HasColumnType("int")
                        .HasColumnName("LabelID");

                    b.Property<string>("Machine")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MiscVariable")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.HasKey("ErrorId");

                    b.ToTable("tblErrorLog_archive", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblFamilyMember", b =>
                {
                    b.Property<int>("FamilyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyMemberId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LetterId")
                        .HasColumnType("int");

                    b.Property<string>("Likes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OtherRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoeSize")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ShoeSizeType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WarmClothingSize")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("WarmClothingType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("FamilyMemberId");

                    b.HasIndex("LetterId");

                    b.ToTable("tblFamilyMember", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblLetterSanta", b =>
                {
                    b.Property<int>("LetterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LetterId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AdminGeneralNotes")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("AdminGeneralNotes1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdminHistoryNotes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdoptedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdoptedByEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdoptedByPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Agency")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FamilyCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LetterReadyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LetterSummary")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumChildrenOver19")
                        .HasColumnType("int");

                    b.Property<int?>("NumChildrenUnder19")
                        .HasColumnType("int");

                    b.Property<int?>("NumFriends")
                        .HasColumnType("int");

                    b.Property<int?>("NumGrandparents")
                        .HasColumnType("int");

                    b.Property<int?>("NumOtherFamily")
                        .HasColumnType("int");

                    b.Property<int?>("NumParents")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WriterName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("LetterId")
                        .HasName("pk_Santa");

                    b.ToTable("tblLetterSanta", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblLetterStatus", b =>
                {
                    b.Property<int>("LetterStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LetterStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LetterStatusId"));

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime");

                    b.Property<string>("EditedByUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("LetterId")
                        .HasColumnType("int")
                        .HasColumnName("LetterID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusNote")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LetterStatusId");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "LetterId" }, "nci_wi_tblLetterStatus_431DE389AD2A0EADED389F4E4CDD4CE3");

                    b.ToTable("tblLetterStatus", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("MessageContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MessageTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("MessageId")
                        .HasName("PK_Message");

                    b.ToTable("tblMessage", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblMessageContact", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("ContactId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.HasKey("MessageId", "ContactId")
                        .HasName("PK_MessageContact");

                    b.HasIndex("ContactId");

                    b.ToTable("tblMessageContact", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblNeedType", b =>
                {
                    b.Property<int>("NeedTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NeedTypeString")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NeedTypeId")
                        .HasName("PK__tblNeedT__18F2CFA5DC7621F9");

                    b.ToTable("tblNeedTypes", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientChild", b =>
                {
                    b.Property<int>("LabelNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelNum"));

                    b.Property<string>("BulkEditTracker")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BulkEditTracker2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HistoryNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Primary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RecChildFreefield")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RecipientNum")
                        .HasColumnType("int");

                    b.HasKey("LabelNum");

                    b.HasIndex(new[] { "RecipientNum", "Primary" }, "nci_wi_tblRecipientChild_F676665CB29E6A64BB3F461258164B4E");

                    b.ToTable("tblRecipientChild", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientChildArchive", b =>
                {
                    b.Property<int>("LabelNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelNum"));

                    b.Property<bool>("BigItem")
                        .HasColumnType("bit");

                    b.Property<bool>("BikeReceived")
                        .HasColumnType("bit");

                    b.Property<string>("BulkEdit")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("BulkStatusChange")
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.Property<string>("ConfirmHeartPrint")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("ConfirmTagPrint")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("EditNewRecipient")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FreeField")
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.Property<bool>("GiftCard")
                        .HasColumnType("bit");

                    b.Property<int?>("GiftCount")
                        .HasColumnType("int");

                    b.Property<string>("HeartCentralGiftCode")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("HistoryNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LastStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<string>("PrintHeart")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("PrintTag")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("RecipientNum")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.HasKey("LabelNum");

                    b.HasIndex("RecipientNum");

                    b.ToTable("tblRecipientChild_archive", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientParent", b =>
                {
                    b.Property<int>("RecipientNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipientNum"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasDefaultValueSql("('years')");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<string>("AltGiftDetail1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AltGiftDetail2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("AltGiftType")
                        .HasColumnType("int");

                    b.Property<string>("AltGiftWish")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ApproveTracker")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("BikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEntered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DonorId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("DonorRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EditNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FloorGiftCount")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("GiftCardCount")
                        .HasColumnType("int");

                    b.Property<string>("GiftDetail1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("GiftDetail2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("GiftType")
                        .HasColumnType("int");

                    b.Property<string>("GiftWish")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Location")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PrintTracker")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RecParFreefield")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RecipientInfo")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<bool?>("Resubmit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TotalGiftCount")
                        .HasColumnType("int");

                    b.Property<int?>("WebRank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("RecipientNum");

                    b.HasIndex("AltGiftType");

                    b.HasIndex("GiftType");

                    b.HasIndex(new[] { "DonorId", "IsActive" }, "nci_wi_tblRecipientParent_44C63202CD904BBFF53DE74223D6A6B7");

                    b.HasIndex(new[] { "AgencyId" }, "nci_wi_tblRecipientParent_8DB3CC20934C2198DA4B4BF14E2A8383");

                    b.ToTable("tblRecipientParent", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientParentArchive", b =>
                {
                    b.Property<int>("RecipientNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipientNum"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeType")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<string>("AltGiftDetail1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AltGiftDetail2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("AltGiftType")
                        .HasColumnType("int");

                    b.Property<string>("AltGiftWish")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("DateEntered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('11/1/2019')");

                    b.Property<string>("DonorId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("DonorRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EditNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Freefield")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("GiftDetail1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("GiftDetail2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("GiftType")
                        .HasColumnType("int");

                    b.Property<string>("GiftWish")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Location")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("RecGiftCountGiftInOut")
                        .HasColumnType("int");

                    b.Property<string>("RecipientInfo")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<bool>("Resubmit")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<int?>("SponsorId")
                        .HasColumnType("int")
                        .HasColumnName("SponsorID");

                    b.Property<bool?>("ThankYouRecieved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("WebRank")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.HasKey("RecipientNum");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AltGiftType");

                    b.HasIndex("DonorId");

                    b.HasIndex("GiftType");

                    b.HasIndex("SponsorId");

                    b.ToTable("tblRecipientParent_archive", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRegion", b =>
                {
                    b.Property<string>("RegionShort")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength();

                    b.Property<string>("RegionLong")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.HasKey("RegionShort");

                    b.HasIndex(new[] { "RegionShort" }, "IX_tblRegions_1")
                        .IsUnique();

                    b.ToTable("tblRegions", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.HasKey("RoleId");

                    b.ToTable("tblRoles", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblSponsor", b =>
                {
                    b.Property<int>("SponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SponsorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponsorId"));

                    b.Property<bool>("AdoptAHeartDisplay")
                        .HasColumnType("bit")
                        .HasColumnName("AdoptAHeartDisplay");

                    b.Property<bool>("CommunitySponsor")
                        .HasColumnType("bit");

                    b.Property<string>("DeliveryDate")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("DisplaySignage")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("DisplayType")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("ElfID")
                        .HasColumnType("int")
                        .HasColumnName("ElfID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LYGiftAssigned")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("LYGiftAssigned")
                        .IsFixedLength();

                    b.Property<string>("LYGiftOut")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("LYGiftOut")
                        .IsFixedLength();

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("OpenToPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PrimaryEmail")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("PrimaryFirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PrimaryLastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .HasDefaultValueSql("(N'SR')")
                        .IsFixedLength();

                    b.Property<byte[]>("Row_Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("SS_AltPhone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("SS_AltPhone");

                    b.Property<string>("SS_Email")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("SS_Email");

                    b.Property<string>("SS_FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("SS_FirstName");

                    b.Property<string>("SS_LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("SS_LastName");

                    b.Property<string>("SS_Phone")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("SS_Phone");

                    b.Property<string>("SongRequest")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SponsorCity")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SponsorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SponsorState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("SponsorStreet")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SponsorZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("SponsorId");

                    b.HasIndex("Region");

                    b.HasIndex(new[] { "ElfID" }, "NonClusteredIndex-tblSponsors-ElfID");

                    b.ToTable("tblSponsors", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblStatusLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<string>("ChangeInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LabelNum")
                        .HasColumnType("int")
                        .HasColumnName("LabelNum");

                    b.Property<string>("LastSponsorID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("LogId");

                    b.HasIndex("AppId");

                    b.HasIndex(new[] { "LabelNum" }, "nci_wi_tblStatusLog_CACBFEF9C020D3B63A46A19646FD8908");

                    b.HasIndex(new[] { "StatusId" }, "nci_wi_tblStatusLog_F8759D1A6B87A674B38E3C8B5FA96258");

                    b.ToTable("tblStatusLog", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblStatusLogArchive", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<string>("ChangeInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EditedByAppDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditedByAppUser")
                        .HasColumnType("int");

                    b.Property<string>("EditedByUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("FreeField")
                        .HasColumnType("int");

                    b.Property<int?>("LabelNum")
                        .HasColumnType("int");

                    b.Property<string>("Machine")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.HasKey("LogId");

                    b.HasIndex("AppId");

                    b.HasIndex("EditedByAppUser");

                    b.HasIndex("LabelNum");

                    b.HasIndex("StatusId");

                    b.ToTable("tblStatusLog_archive", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblStatusType", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("ChartGroup1")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ChartGroup2")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("Letters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("RecipientChild")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RecipientWebGroup")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Row_Version");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("StatusObsolete")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusSortNumber")
                        .HasColumnType("int");

                    b.Property<string>("WebGroup")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StatusId");

                    b.ToTable("tblStatusTypes", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblStory", b =>
                {
                    b.Property<int>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoryId"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("StoryContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("StoryId")
                        .HasName("PK_StoryIUd");

                    b.ToTable("tblStory", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("UserAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UserDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<bool?>("UserIsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<bool?>("UserMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength();

                    b.HasKey("UserId")
                        .HasName("PK_tblAppUserTest");

                    b.ToTable("tblUsers", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewHeader", b =>
                {
                    b.Property<int>("ViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ViewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewId"));

                    b.Property<int?>("AgeFromSearch")
                        .HasColumnType("int")
                        .HasColumnName("AgeFrom_Search");

                    b.Property<int?>("AgeToSearch")
                        .HasColumnType("int")
                        .HasColumnName("AgeTo_Search");

                    b.Property<string>("AndOrMode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.Property<string>("BigItemSearch")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("BigItem_Search")
                        .IsFixedLength();

                    b.Property<string>("BikeSearch")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("Bike_Search")
                        .IsFixedLength();

                    b.Property<string>("GenderSearch")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("Gender_Search")
                        .IsFixedLength();

                    b.Property<string>("GiftCardSearch")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("GiftCard_Search")
                        .IsFixedLength();

                    b.Property<string>("GiftDescription1Search")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("GiftDescription1_Search")
                        .IsFixedLength();

                    b.Property<string>("GiftDescription2Search")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("GiftDescription2_Search")
                        .IsFixedLength();

                    b.Property<string>("GiftTypeSearch")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("GiftType_Search")
                        .IsFixedLength();

                    b.Property<int>("ViewCreaterUserId")
                        .HasColumnType("int")
                        .HasColumnName("ViewCreater_UserID");

                    b.Property<string>("ViewDescription")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nchar(75)")
                        .IsFixedLength();

                    b.HasKey("ViewId");

                    b.HasIndex("ViewCreaterUserId");

                    b.HasIndex(new[] { "ViewDescription" }, "IX_tblViewHeaders")
                        .IsUnique();

                    b.ToTable("tblViewHeaders", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewItemsAgency", b =>
                {
                    b.Property<int>("ViewAgencyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewAgencyKey"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int")
                        .HasColumnName("AgencyID");

                    b.Property<int>("ViewId")
                        .HasColumnType("int")
                        .HasColumnName("ViewID");

                    b.HasKey("ViewAgencyKey")
                        .HasName("PK_tblViewItemsAgency");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ViewId");

                    b.ToTable("tblViewItems_Agency", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewItemsSponsor", b =>
                {
                    b.Property<int>("ViewSponsorKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewSponsorKey"));

                    b.Property<int>("SponsorId")
                        .HasColumnType("int")
                        .HasColumnName("SponsorID");

                    b.Property<int>("ViewId")
                        .HasColumnType("int")
                        .HasColumnName("ViewID");

                    b.HasKey("ViewSponsorKey");

                    b.HasIndex("SponsorId");

                    b.HasIndex("ViewId");

                    b.ToTable("tblViewItems_Sponsor", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewItemsStatus", b =>
                {
                    b.Property<int>("ViewStatusKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewStatusKey"));

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("ViewId")
                        .HasColumnType("int")
                        .HasColumnName("ViewID");

                    b.HasKey("ViewStatusKey");

                    b.HasIndex("StatusId");

                    b.HasIndex("ViewId");

                    b.ToTable("tblViewItems_Status", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblVolunteerLog", b =>
                {
                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FreeField")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Site")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("datetime");

                    b.Property<int>("VolId")
                        .HasColumnType("int")
                        .HasColumnName("VolID");

                    b.Property<int>("VolLogNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolLogNum"));

                    b.ToTable("tblVolunteerLog", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblVolunteerName", b =>
                {
                    b.Property<int>("VolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VolID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FreeField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VolId");

                    b.ToTable("tblVolunteerNames", (string)null);
                });

            modelBuilder.Entity("SecretSanta_Core.Models.AgencyContactModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AltPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstimateWishes")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgencyContactModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecretSanta_Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgency", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblRegion", "RegionNavigation")
                        .WithMany("TblAgencies")
                        .HasForeignKey("Region")
                        .IsRequired()
                        .HasConstraintName("FK_tblAgencies_tblRegions");

                    b.Navigation("RegionNavigation");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgencyLocation", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblAgency", "Agency")
                        .WithMany("TblAgencyLocations")
                        .HasForeignKey("AgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAgencyLocations_tblAgencies");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgencyPickUp", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblAgency", "Agency")
                        .WithMany("TblAgencyPickUps")
                        .HasForeignKey("AgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAgencyPickUp_tblAgencies");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblDonation", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblRecipientParent", "TblRecipientParent")
                        .WithMany("TblDonations")
                        .HasForeignKey("RecipientNum")
                        .IsRequired()
                        .HasConstraintName("FK_tblDonations_tblRecipientParent");

                    b.Navigation("TblRecipientParent");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblDonorThankYou", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblDonor", "Donor")
                        .WithMany("TblDonorThankYous")
                        .HasForeignKey("DonorId")
                        .IsRequired()
                        .HasConstraintName("FK_tblDonorThankYou_tblDonor");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblFamilyMember", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblLetterSanta", "Letter")
                        .WithMany("TblFamilyMembers")
                        .HasForeignKey("LetterId")
                        .IsRequired()
                        .HasConstraintName("FK_tblFamilyMember_tblLetterSanta");

                    b.Navigation("Letter");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblLetterStatus", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblLetterSanta", "Letter")
                        .WithMany("TblLetterStatuses")
                        .HasForeignKey("LetterId")
                        .IsRequired()
                        .HasConstraintName("FK_tblLetterStatus_tblLetterSanta");

                    b.HasOne("SecretSanta_Core.Data.TblStatusType", "Status")
                        .WithMany("TblLetterStatuses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_tblLetterStatus_tblStatusTypes");

                    b.Navigation("Letter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblMessageContact", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblAgencyContact", "Contact")
                        .WithMany("TblMessageContacts")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_tblMessageContact_tblAgencyContacts");

                    b.HasOne("SecretSanta_Core.Data.TblMessage", "Message")
                        .WithMany("TblMessageContacts")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("FK_tblMessageContact_tblMessage");

                    b.Navigation("Contact");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientChild", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblRecipientParent", "RecipientNumNavigation")
                        .WithMany("TblRecipientChildren")
                        .HasForeignKey("RecipientNum")
                        .IsRequired()
                        .HasConstraintName("FK_tblRecipientChild_tblRecipientParent");

                    b.Navigation("RecipientNumNavigation");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientChildArchive", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblRecipientParentArchive", "RecipientNumNavigation")
                        .WithMany("TblRecipientChildArchives")
                        .HasForeignKey("RecipientNum")
                        .IsRequired()
                        .HasConstraintName("FK_tblRecipientChild_tblRecipientParent_archive");

                    b.Navigation("RecipientNumNavigation");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientParent", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblAgency", "Agency")
                        .WithMany("TblRecipientParents")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_tblRecipientParent_tblAgencies");

                    b.HasOne("SecretSanta_Core.Data.GiftDetail", "AltGiftTypeNavigation")
                        .WithMany("TblRecipientParentAltGiftTypeNavigations")
                        .HasForeignKey("AltGiftType")
                        .HasConstraintName("FK_tblRecipientParent_AltGiftDetail");

                    b.HasOne("SecretSanta_Core.Data.TblDonor", "Donor")
                        .WithMany("TblRecipientParents")
                        .HasForeignKey("DonorId")
                        .HasConstraintName("FK_tblRecipientParent_tblDonor");

                    b.HasOne("SecretSanta_Core.Data.GiftDetail", "GiftTypeNavigation")
                        .WithMany("TblRecipientParentGiftTypeNavigations")
                        .HasForeignKey("GiftType")
                        .HasConstraintName("FK_tblRecipientParent_GiftDetail");

                    b.Navigation("Agency");

                    b.Navigation("AltGiftTypeNavigation");

                    b.Navigation("Donor");

                    b.Navigation("GiftTypeNavigation");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientParentArchive", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblAgency", "Agency")
                        .WithMany("TblRecipientParentArchives")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_tblRecipientParent_tblAgencies_archive");

                    b.HasOne("SecretSanta_Core.Data.GiftDetail", "AltGiftTypeNavigation")
                        .WithMany("TblRecipientParentArchiveAltGiftTypeNavigations")
                        .HasForeignKey("AltGiftType")
                        .HasConstraintName("FK_tblRecipientParent_AltGiftDetail_archive");

                    b.HasOne("SecretSanta_Core.Data.TblDonor", "Donor")
                        .WithMany("TblRecipientParentArchives")
                        .HasForeignKey("DonorId")
                        .HasConstraintName("FK_tblRecipientParent_tblDonor_archive");

                    b.HasOne("SecretSanta_Core.Data.GiftDetail", "GiftTypeNavigation")
                        .WithMany("TblRecipientParentArchiveGiftTypeNavigations")
                        .HasForeignKey("GiftType")
                        .HasConstraintName("FK_tblRecipientParent_GiftDetail_archive");

                    b.HasOne("SecretSanta_Core.Data.TblSponsor", "Sponsor")
                        .WithMany("TblRecipientParentArchives")
                        .HasForeignKey("SponsorId")
                        .HasConstraintName("FK_tblRecipientParent_tblSponsors_archive");

                    b.Navigation("Agency");

                    b.Navigation("AltGiftTypeNavigation");

                    b.Navigation("Donor");

                    b.Navigation("GiftTypeNavigation");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblSponsor", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblElf", "Elf")
                        .WithMany("TblSponsors")
                        .HasForeignKey("ElfID")
                        .HasConstraintName("FK_tblSponsors_tblElves");

                    b.HasOne("SecretSanta_Core.Data.TblRegion", "RegionNavigation")
                        .WithMany("TblSponsors")
                        .HasForeignKey("Region")
                        .IsRequired()
                        .HasConstraintName("FK_tblSponsors_tblRegions");

                    b.Navigation("Elf");

                    b.Navigation("RegionNavigation");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblStatusLog", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblApp", "App")
                        .WithMany("TblStatusLogs")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("FK_tblStatusLog_tblApps");

                    b.HasOne("SecretSanta_Core.Data.TblRecipientChild", "LabelNumNavigation")
                        .WithMany("TblStatusLogs")
                        .HasForeignKey("LabelNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblStatusLog_tblRecipientChild");

                    b.HasOne("SecretSanta_Core.Data.TblStatusType", "Status")
                        .WithMany("TblStatusLogs")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_tblStatusLog_tblStatusTypes");

                    b.Navigation("App");

                    b.Navigation("LabelNumNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblStatusLogArchive", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblApp", "App")
                        .WithMany("TblStatusLogArchives")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("FK_tblStatusLog_tblApps_archive");

                    b.HasOne("SecretSanta_Core.Data.TblUser", "EditedByAppUserNavigation")
                        .WithMany("TblStatusLogArchives")
                        .HasForeignKey("EditedByAppUser")
                        .HasConstraintName("FK_tblStatusLog_tblUsers_archive");

                    b.HasOne("SecretSanta_Core.Data.TblRecipientChildArchive", "LabelNumNavigation")
                        .WithMany("TblStatusLogArchives")
                        .HasForeignKey("LabelNum")
                        .HasConstraintName("FK_tblStatusLog_tblRecipientChild_archive");

                    b.HasOne("SecretSanta_Core.Data.TblStatusType", "Status")
                        .WithMany("TblStatusLogArchives")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_tblStatusLog_tblStatusTypes_archive");

                    b.Navigation("App");

                    b.Navigation("EditedByAppUserNavigation");

                    b.Navigation("LabelNumNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewHeader", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblUser", "ViewCreaterUser")
                        .WithMany("TblViewHeaders")
                        .HasForeignKey("ViewCreaterUserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblViewHeaders_tblUsers");

                    b.Navigation("ViewCreaterUser");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewItemsAgency", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblAgency", "Agency")
                        .WithMany("TblViewItemsAgencies")
                        .HasForeignKey("AgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblViewItems_Agency_tblAgencies");

                    b.HasOne("SecretSanta_Core.Data.TblViewHeader", "View")
                        .WithMany("TblViewItemsAgencies")
                        .HasForeignKey("ViewId")
                        .IsRequired()
                        .HasConstraintName("FK_tblViewItems_Agency_tblViewHeaders");

                    b.Navigation("Agency");

                    b.Navigation("View");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewItemsSponsor", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblSponsor", "Sponsor")
                        .WithMany("TblViewItemsSponsors")
                        .HasForeignKey("SponsorId")
                        .IsRequired()
                        .HasConstraintName("FK_tblViewItems_Sponsor_tblSponsors");

                    b.HasOne("SecretSanta_Core.Data.TblViewHeader", "View")
                        .WithMany("TblViewItemsSponsors")
                        .HasForeignKey("ViewId")
                        .IsRequired()
                        .HasConstraintName("FK_tblViewItems_Sponsor_tblViewHeaders");

                    b.Navigation("Sponsor");

                    b.Navigation("View");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewItemsStatus", b =>
                {
                    b.HasOne("SecretSanta_Core.Data.TblStatusType", "Status")
                        .WithMany("TblViewItemsStatuses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_tblViewItems_Status_tblStatusTypes");

                    b.HasOne("SecretSanta_Core.Data.TblViewHeader", "View")
                        .WithMany("TblViewItemsStatuses")
                        .HasForeignKey("ViewId")
                        .IsRequired()
                        .HasConstraintName("FK_tblViewItems_Status_tblViewHeaders");

                    b.Navigation("Status");

                    b.Navigation("View");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.GiftDetail", b =>
                {
                    b.Navigation("TblRecipientParentAltGiftTypeNavigations");

                    b.Navigation("TblRecipientParentArchiveAltGiftTypeNavigations");

                    b.Navigation("TblRecipientParentArchiveGiftTypeNavigations");

                    b.Navigation("TblRecipientParentGiftTypeNavigations");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgency", b =>
                {
                    b.Navigation("TblAgencyLocations");

                    b.Navigation("TblAgencyPickUps");

                    b.Navigation("TblRecipientParentArchives");

                    b.Navigation("TblRecipientParents");

                    b.Navigation("TblViewItemsAgencies");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblAgencyContact", b =>
                {
                    b.Navigation("TblMessageContacts");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblApp", b =>
                {
                    b.Navigation("TblStatusLogArchives");

                    b.Navigation("TblStatusLogs");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblDonor", b =>
                {
                    b.Navigation("TblDonorThankYous");

                    b.Navigation("TblRecipientParentArchives");

                    b.Navigation("TblRecipientParents");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblElf", b =>
                {
                    b.Navigation("TblSponsors");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblLetterSanta", b =>
                {
                    b.Navigation("TblFamilyMembers");

                    b.Navigation("TblLetterStatuses");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblMessage", b =>
                {
                    b.Navigation("TblMessageContacts");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientChild", b =>
                {
                    b.Navigation("TblStatusLogs");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientChildArchive", b =>
                {
                    b.Navigation("TblStatusLogArchives");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientParent", b =>
                {
                    b.Navigation("TblDonations");

                    b.Navigation("TblRecipientChildren");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRecipientParentArchive", b =>
                {
                    b.Navigation("TblRecipientChildArchives");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblRegion", b =>
                {
                    b.Navigation("TblAgencies");

                    b.Navigation("TblSponsors");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblSponsor", b =>
                {
                    b.Navigation("TblRecipientParentArchives");

                    b.Navigation("TblViewItemsSponsors");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblStatusType", b =>
                {
                    b.Navigation("TblLetterStatuses");

                    b.Navigation("TblStatusLogArchives");

                    b.Navigation("TblStatusLogs");

                    b.Navigation("TblViewItemsStatuses");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblUser", b =>
                {
                    b.Navigation("TblStatusLogArchives");

                    b.Navigation("TblViewHeaders");
                });

            modelBuilder.Entity("SecretSanta_Core.Data.TblViewHeader", b =>
                {
                    b.Navigation("TblViewItemsAgencies");

                    b.Navigation("TblViewItemsSponsors");

                    b.Navigation("TblViewItemsStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
